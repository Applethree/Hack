class Solution {
public:
    int climbStairs(int n) {
        if (n <= 1) return 1;
        vector<int> dp(n);
        dp[0] = 1; dp[1] = 2;
        for (int i = 2; i < n; ++i) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp.back();
    }
};




class Solution {
public:
    int climbStairs(int n) {
        int a = 1, b = 1;
        while (n--) {
            b += a;
            a = b - a;
        }
        return a;
    }
};



===================n jie========================
int climbStairs4(int n)  
{  
    if (n <= 0)  
        return 0;  
    const static int maxStep = 2;  
    int sum = 0;  
    deque<int>ways(maxStep, 0);  
          
    for (int i = 1; i <= n; i++)  
    {  
        sum = 0;  
        for (int j = 1; j <= maxStep && j<= i; j++)  
        {  
            if (i>j)  
                sum += ways[maxStep - j];  
            if (i == j)  
                sum++;  
        }  
        ways.pop_front();  
        ways.push_back(sum);  
              
    }  
    return ways.back();  
} 
